// Step 1. Import the `@prisma/client` package, which is generated by `npx prisma generate` command.
import {Player, PrismaClient} from '@prisma/client';

/**
 * 🚪Main function.
 */
async function main(): Promise<void> {
  // Step 2. Create a new PrismaClient instance.
  const prisma = new PrismaClient();
  try {
    // Step 3. Use Prisma Client to perform some CRUD operations.

    const version = await getTiDBVersion(prisma);
    console.log(`🔌 Connected to TiDB cluster! (TiDB version: ${version})`);

    const newPlayer = await createPlayer(prisma, 'Alice',100, 100);
    console.log(`🆕 Created a new player with ID ${newPlayer.id}.`);

    const player = await getPlayerByID(prisma, newPlayer.id);
    if (!player) {
      throw new Error(`Cannot find player with ID ${newPlayer.id}.`);
    }
    console.log(`ℹ️ Got Player ${player.id}: Player { id: ${player.id}, coins: ${player.coins}, goods: ${player.goods} }`);

    const updatedPlayer = await updatePlayer(prisma, player.id, 50, 50);
    console.log(`🔢 Added 50 coins and 50 goods to player ${player.id}, now player ${updatedPlayer.id} has ${updatedPlayer.coins} coins and ${updatedPlayer.goods} goods.`);

    const deletedPlayer = await deletePlayerByID(prisma, player.id);
    console.log(`🚮 Player ${deletedPlayer.id} has been deleted.`);
  } finally {
    // Step 4. Disconnect Prisma Client.
    await prisma.$disconnect();
    process.exit(1);
  }
}

void main();

/**
 * Get TiDB version.
 */
async function getTiDBVersion(prisma: PrismaClient): Promise<string> {
  const rows = await prisma.$queryRaw<{ version: string }[]>`SELECT version() AS version;`;
  return rows[0].version;
}

/**
 * 🆕 CREATE a new player.
 */
async function createPlayer(prisma: PrismaClient, name: string, coins: number, goods: number): Promise<Player> {
  return prisma.player.create({
    data: {
      name,
      coins,
      goods,
      createdAt: new Date(),
    }
  });
}

/**
 * ℹ️ READ player information by ID.
 */
async function getPlayerByID(prisma: PrismaClient, id: number): Promise<Player | null> {
  return prisma.player.findUnique({
    where: {
      id,
    }
  });
}

/**
 * 🔢 UPDATE player information by ID.
 */
async function updatePlayer(prisma: PrismaClient, id: number, incCoins: number, incGoods: number): Promise<Player> {
  return prisma.player.update({
    where: {
      id,
    },
    data: {
      coins: {
        increment: incCoins,
      },
      goods: {
        increment: incGoods,
      },
    }
  });
}

/**
 * 🚮 DELETE player information by ID.
 */
async function deletePlayerByID(prisma: PrismaClient, id: number): Promise<Player> {
  return prisma.player.delete({
    where: {
      id,
    }
  });
}